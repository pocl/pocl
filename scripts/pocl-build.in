#!/bin/sh
# pocl-build - Compile a OpenCL kernel to bytecode using clang.
#
# Copyright (c) 2011 Universidad Rey Juan Carlos and
#               2012 Pekka Jääskeläinen / TUT
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

if [ -n "$POCL_VERBOSE" ]; then
    set -x
    set -e
    echo 0=$0 @=$@
fi

target=@HOST@

while getopts t:o: o
do
    case "$o" in
	t)   target="$OPTARG";;
	o)   output_file="$OPTARG";;
	[?]) echo >&2 "Usage: $0 [-t <llvm_target_triplet>] -o output input" && exit 1;;
    esac
done
shift $((${OPTIND}-1))

if [ "x$output_file" = x ]
then
    echo >&2 "Usage: $0 [-t <llvm_target_triplet>] -o output input" && exit 1
fi

case $target in
    tce*)     CLANG_FLAGS="-target tce-tut-llvm"
              LLC_FLAGS="@HOST_LLC_FLAGS@"
              LD_FLAGS="@HOST_LD_FLAGS@";;
    @HOST@)   CLANG_FLAGS="@HOST_CLANG_FLAGS@"
              LLC_FLAGS="@HOST_LLC_FLAGS@"
              LD_FLAGS="@HOST_LD_FLAGS@";;
    @TARGET@) CLANG_FLAGS="@TARGET_CLANG_FLAGS@"
              LLC_FLAGS="@TARGET_LLC_FLAGS@"
              LD_FLAGS="@TARGET_LD_FLAGS@";;
esac
CLANG_FLAGS="$CLANG_FLAGS -fasm -fsigned-char -Xclang -ffake-address-space-map"

# With fp-contract we get calls to fma with processors which do not
# have fma instructions. These ruin the performance. Better to have
# the mul+add separated in the IR.
CLANG_FLAGS="$CLANG_FLAGS -ffp-contract=off"

preprocessed_file=${output_file}.i

# Set up the paths assuming we are running an installed pocl.
full_target_dir="@pkglibdir@/${target_dir}"
kernel_h=@pkgincludedir@/_kernel.h
kernel_h_pch=$full_target_dir/_kernel.h.pch

# BEGIN REMOVE ONCE INSTALLED
# Override the paths here so we find the files from the build dir
# until pocl is installed to enable development testing without
# installing pocl all the time.

full_target_dir="@abs_top_builddir@/lib/kernel/${target_dir}"
kernel_h=@abs_top_srcdir@/include/_kernel.h
kernel_h_pch=$full_target_dir/_kernel.h.pch

# END REMOVE ONCE INSTALLED

# Use precompiled headers, if available. Do not use it if USER_OPTIONS is 
# passed (clBuildProgram options) because the pch has to be compiled with the
# same options.
if test -e $kernel_h_pch -a -z "$USER_OPTIONS" -a "x$POCL_USE_PCH" = "x1";
then
    include_cmd="-Xclang -include-pch -Xclang $kernel_h_pch"
else
    include_cmd="-include $kernel_h"
fi

@CLANG@ @CLFLAGS@ @FORCED_CLFLAGS@ ${EXTRA_CPPFLAGS} ${USER_OPTIONS} ${CLANG_FLAGS} -c ${include_cmd} -emit-llvm -o ${output_file} -x cl $1
