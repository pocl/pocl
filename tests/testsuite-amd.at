m4_define([POAT_AMDSDK_SETUP],[
  AT_SETUP([$1])
  AT_KEYWORDS([amdsdk $1 $2])
  AT_SKIP_IF([AS_CASE([" $POAT_TESTSUITES "],[*" amd "*],[false],[:])])
  # AMD APP SDK tests require ICD loader with
  AT_SKIP_IF([! grep -q "#define BUILD_ICD" $abs_top_builddir/config.h])
])

AT_BANNER([AMD APP SDK tests])

POAT_AMDSDK_SETUP([aesencryptdecrypt-repl])
#This fails, and on LLVM 3.3 it takes more than an hour (on modest PPC hardware) to detect it.
AT_SKIP_IF([grep HOST_CPU $abs_top_builddir/config.h | cut -d\" -f2 | grep -q powerpc])
AT_CHECK_UNQUOTED([POCL_WORK_GROUP_METHOD=repl make test_AESEncryptDecrypt -sC $abs_top_builddir/examples/AMD | grep "Encryption Passed"], 0, 
[Encryption Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([aesencryptdecrypt-loops])
AT_CHECK_UNQUOTED([POCL_WORK_GROUP_METHOD=loops make test_AESEncryptDecrypt -sC $abs_top_builddir/examples/AMD | grep "Encryption Passed"], 0, 
[Encryption Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([atomiccounters])
# Expected Error: Device does not support cl_ext_atomic_counters_32 extension!
AT_XFAIL_IF(true)
AT_CHECK_UNQUOTED([make test_AtomicCounters -sC $abs_top_builddir/examples/AMD | grep "Encryption Passed"], 0, 
[Encryption Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([bitonicsort])
AT_CHECK_UNQUOTED([make test_BitonicSort -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([binarysearch])
AT_CHECK_UNQUOTED([make test_BinarySearch -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([binomialoption-repl])
AT_XFAIL_IF([grep HOST_CPU $abs_top_builddir/config.h | cut -d\" -f2 | grep -q powerpc &&
             grep -q "define LLVM_3_2" $abs_top_builddir/config.h])
AT_CHECK_UNQUOTED([POCL_WORK_GROUP_METHOD=repl make test_BinomialOption -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([binomialoption-loops])
AT_CHECK_UNQUOTED([POCL_WORK_GROUP_METHOD=loops make test_BinomialOption -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([blackscholes])
AT_CHECK_UNQUOTED([make test_BlackScholes -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([blackscholesdp])
AT_KEYWORDS([cl_amd_fp64])
#this causes assert on LLVM 3.1
AT_SKIP_IF([ grep "#define LLVM_3_1" $abs_top_srcdir/config.h ])
AT_XFAIL_IF([grep HOST_CPU $abs_top_builddir/config.h | cut -d\" -f2 | grep -q powerpc])
AT_XFAIL_IF([grep HOST_CPU $abs_top_builddir/config.h | cut -d\" -f2 | grep -q armv])
AT_CHECK_UNQUOTED([make test_BlackScholesDP -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
], ignore)
AT_CLEANUP

POAT_AMDSDK_SETUP([boxfilter])
AT_CHECK_UNQUOTED([make test_BoxFilter -sC $abs_top_builddir/examples/AMD | egrep "Passed|failed"], 0, 
[Passed!
Verifying results...Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([dct])
AT_CHECK_UNQUOTED([make test_DCT -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([devicefission])
# Error: clGetDeviceInfo failed. (maxSubDevices) Error code : CL_INVALID_VALUE
AT_XFAIL_IF(true)
AT_CHECK_UNQUOTED([make test_DeviceFission -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([dwthaar1d])
# Failed (verification error). 
AT_XFAIL_IF(true)
AT_CHECK_UNQUOTED([make test_DwtHaar1D -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([fastwalshtransform])
AT_CHECK_UNQUOTED([make test_FastWalshTransform -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([floydwarshall])
AT_CHECK_UNQUOTED([make test_FloydWarshall -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([fluidsimulation2d])
# error: can't convert between vector values of different size ('uint' (aka 'unsigned int') and 'int8')
# It should be a legal implicit conversion according to 6.3 Operators. Some other error makes it
# break with Intel OCL also.
AT_XFAIL_IF(true)
AT_KEYWORDS([cl_amd_fp64])
AT_CHECK_UNQUOTED([make test_FluidSimulation2D -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
], ignore)
AT_CLEANUP

POAT_AMDSDK_SETUP([helloworld])
AT_CHECK_UNQUOTED([make test_HelloWorld -sC $abs_top_builddir/examples/AMD | egrep "GdkknVnqkc|HelloWorld"], 0, 
[GdkknVnqkc
HelloWorld
])
AT_CLEANUP

POAT_AMDSDK_SETUP([histogram-repl])
AT_CHECK_UNQUOTED([POCL_WORK_GROUP_METHOD=repl make test_Histogram -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])     
AT_CLEANUP

POAT_AMDSDK_SETUP([histogram-loops])
AT_CHECK_UNQUOTED([POCL_WORK_GROUP_METHOD=loops make test_Histogram -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])     
AT_CLEANUP

POAT_AMDSDK_SETUP([imageoverlap])
# doen't work because of image indexing, sdk 2.9 version works
AT_SKIP_IF(true)
AT_CHECK_UNQUOTED([make test_ImageOverlap -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Verifying result - Passed!
])     
AT_CLEANUP

POAT_AMDSDK_SETUP([ludecomposition])
AT_KEYWORDS([cl_amd_fp64])
#test uses doubles
AT_XFAIL_IF([grep HOST_CPU $abs_top_builddir/config.h | cut -d\" -f2 | grep -q powerpc])
AT_XFAIL_IF([grep HOST_CPU $abs_top_builddir/config.h | cut -d\" -f2 | grep -q armv])
AT_CHECK_UNQUOTED([make test_LUDecomposition -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
], ignore)
AT_CLEANUP

POAT_AMDSDK_SETUP([mandelbrot])
AT_SKIP_IF([ grep "undef HAVE_GLEW" $abs_top_srcdir/config.h ])
# undefined symbol: _Z7std_fmaDv4_fS_S_ with VML
AT_CHECK_UNQUOTED([make test_Mandelbrot -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([matrixmul])
AT_CHECK_UNQUOTED([make test_MatrixMultiplication -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([matrixmulimage])
# pocl error: encountered unimplemented part of the OpenCL specs in clCreateImage2D.c:119
AT_XFAIL_IF(true)
AT_CHECK_UNQUOTED([make test_MatrixMulImage -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([matrixtranspose])
AT_CHECK_UNQUOTED([make test_MatrixTranspose -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([memorymodel-repl])
AT_CHECK_UNQUOTED([POCL_WORK_GROUP_METHOD=repl make test_MemoryModel -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([memorymodel-loops])
AT_CHECK_UNQUOTED([POCL_WORK_GROUP_METHOD=loops make test_MemoryModel -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([montecarloasian])
# kernel compilation fails due to 
# error: can't convert between vector values of different size ('float4' and 'int')
# It should be a legal implicit conversion according to 6.3 Operators. Works also with Intel OCL
AT_XFAIL_IF(true)
AT_CHECK_UNQUOTED([make test_MonteCarloAsian -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([montecarloasiandp])
AT_KEYWORDS([cl_amd_fp64])
# error: can't convert between vector values of different size ('double4' and 'int')
# It should be a legal implicit conversion according to 6.3 Operators. Works also with Intel OCL
AT_XFAIL_IF(true)
AT_CHECK_UNQUOTED([make test_MonteCarloAsianDP -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
], ignore)
AT_CLEANUP

POAT_AMDSDK_SETUP([nbody])
AT_SKIP_IF([ grep "undef HAVE_GLEW" $abs_top_srcdir/config.h ])
AT_CHECK_UNQUOTED([make test_NBody -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([prefixsum])
AT_CHECK_UNQUOTED([make test_PrefixSum -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([quasirandomsequence])
AT_CHECK_UNQUOTED([make test_QuasiRandomSequence -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([radixsort])
AT_CHECK_UNQUOTED([make test_RadixSort -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
], ignore)     
AT_CLEANUP

POAT_AMDSDK_SETUP([recursivegaussian])
AT_CHECK_UNQUOTED([make test_RecursiveGaussian -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([reduction])
AT_CHECK_UNQUOTED([make test_Reduction -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([scanlargearrays])
# Fails with vectorization. With wiloops and no unrolling, the vectorization won't apply.
AT_CHECK_UNQUOTED([POCL_VECTORIZE_WORK_GROUPS=1 make test_ScanLargeArrays -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([simpleconvolution])
AT_CHECK_UNQUOTED([make test_SimpleConvolution -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([simpleimage])
AT_CHECK_UNQUOTED([make test_SimpleImage -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Verifying 2D copy result - Passed!
Verifying 3D copy result - Passed!
])     
AT_CLEANUP

POAT_AMDSDK_SETUP([sobelfilter])
AT_CHECK_UNQUOTED([make test_SobelFilter -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])     
AT_CLEANUP

POAT_AMDSDK_SETUP([template])
AT_CHECK_UNQUOTED([make test_Template -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])     
AT_CLEANUP

POAT_AMDSDK_SETUP([templatec])
AT_CHECK_UNQUOTED([make test_TemplateC -sC $abs_top_builddir/examples/AMD | grep Passed], 0, 
[Passed!
])     
AT_CLEANUP

POAT_AMDSDK_SETUP([transferoverlap])
# Expected Error: Device does not support cl_khr_local_int32_base_atomics extension!
AT_XFAIL_IF(true)
AT_CHECK_UNQUOTED([make test_TransferOverlap -sC $abs_top_builddir/examples/AMD | grep "Passed"], 0, 
[Passed!
])
AT_CLEANUP

POAT_AMDSDK_SETUP([urng])
AT_CHECK_UNQUOTED([make test_URNG -sC $abs_top_builddir/examples/AMD | grep Passed | cut -c -7], 0, 
[Passed! 
])     
AT_CLEANUP
