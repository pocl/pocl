---
name: Linux / CPU + GPU weekly full CTS

permissions:
  contents: read

on:
  workflow_dispatch:
  schedule:
# at 12:17 UTC every friday
    - cron: '17 12 * * 5'

jobs:
  cpu_cts:
    name: LLVM ${{ matrix.llvm }} - CPU ${{ matrix.config }}
    runs-on: [self-hosted, linux, x64, "${{ matrix.config }}"]
    timeout-minutes: 1600
    # CPU runners have action runner directly in the home directory
    env:
      CCACHE_BASEDIR: "${{ github.workspace }}"
      CCACHE_DIR: "${{ github.workspace }}/../../../ccache_storage"
      EXAMPLES_DIR: "${{ github.workspace }}/../../../examples"
      # full CTS launches thousands of tests, the compiler cache could grow to >10 GB -> avoid this
      POCL_KERNEL_CACHE: "0"
    strategy:
      fail-fast: false
      matrix:
        llvm: [20]
        config: [full_cts_cpu, full_cts_cpu_spirv]

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Load Env vars
        id: load-env
        run: |
          cat ${{ github.workspace }}/.github/variables.txt >> $GITHUB_ENV

      - name: Run CMake
        id: cmake
        timeout-minutes: 60
        run: |
          rm -rf ${{ github.workspace }}/build
          mkdir ${{ github.workspace }}/build
          mkdir -p ${EXAMPLES_DIR}/build_${{ matrix.llvm }}_${{ matrix.config }}
          mkdir -p ${EXAMPLES_DIR}/source

          BUILD_FLAGS="-O2 -march=native"
          cmake -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_BUILD_TYPE=Release "-DCMAKE_C_FLAGS_RELEASE=$BUILD_FLAGS" "-DCMAKE_CXX_FLAGS_RELEASE=$BUILD_FLAGS" \
          -DWITH_LLVM_CONFIG=/usr/bin/llvm-config-${{ matrix.llvm }} -DLLVM_SPIRV=/usr/bin/llvm-spirv-${{ matrix.llvm }} \
          -DTESTSUITE_SOURCE_BASEDIR=${EXAMPLES_DIR}/source -DTESTSUITE_BASEDIR=${EXAMPLES_DIR}/build_${{ matrix.llvm }}_${{ matrix.config }} -DENABLE_TESTSUITES=conformance -DENABLE_CONFORMANCE=ON \
          -B ${{ github.workspace }}/build ${{ github.workspace }}

      - name: Run Build
        id: build
        timeout-minutes: 60
        run: |
          cd ${{ github.workspace }}/build && make -j$(nproc) && make -j$(nproc) prepare_examples

      - name: Run Tests
        id: ctest
        env:
          POCL_CACHE_DIR: "${{ runner.temp }}/GH_POCL_CACHE"
        run: |
          runCTest() {
            cd ${{ github.workspace }}/build &&  ctest -j$(nproc) $CTEST_FLAGS "$@"
          }
          rm -rf ${{ env.POCL_CACHE_DIR }}
          # hardcoded path in test_compiler / execute_after_included_header_link
          rm -rf /tmp/foo
          mkdir ${{ env.POCL_CACHE_DIR }}
          if [ "${{ matrix.config }}" == "full_cts_cpu" ]; then
            runCTest -L conformance_suite_full_main
          elif [ "${{ matrix.config }}" == "full_cts_cpu_spirv" ]; then
            runCTest -L conformance_suite_full_spirv
          else
            echo "Unknown configuration" && exit 1
          fi

  level_zero_cts:
    name: LLVM ${{ matrix.llvm }} - LevelZero ${{ matrix.config }}
    runs-on: [self-hosted, linux, x64, "${{ matrix.config }}"]
    timeout-minutes: 1600
    env:
      CCACHE_BASEDIR: "${{ github.workspace }}"
      CCACHE_DIR: "${{ github.workspace }}/../../../../ccache_storage"
      EXAMPLES_DIR: "${{ github.workspace }}/../../../../examples"
      # full CTS launches thousands of tests, the compiler cache could grow to >10 GB -> avoid this
      POCL_KERNEL_CACHE: "0"
    strategy:
      fail-fast: false
      matrix:
        llvm: [20]
        config: [full_cts_lz, full_cts_lz_spirv]

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Load Env vars
        id: load-env
        run: |
          cat ${{ github.workspace }}/.github/variables.txt >> $GITHUB_ENV

      - name: Run CMake
        id: cmake
        timeout-minutes: 60
        run: |
          rm -rf ${{ github.workspace }}/build
          mkdir ${{ github.workspace }}/build
          mkdir -p ${EXAMPLES_DIR}/build_${{ matrix.llvm }}_${{ matrix.config }}
          mkdir -p ${EXAMPLES_DIR}/source

          BUILD_FLAGS="-O2 -march=native"
          cmake -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_BUILD_TYPE=Release "-DCMAKE_C_FLAGS_RELEASE=$BUILD_FLAGS" "-DCMAKE_CXX_FLAGS_RELEASE=$BUILD_FLAGS" \
          -DWITH_LLVM_CONFIG=/usr/bin/llvm-config-${{ matrix.llvm }} -DLLVM_SPIRV=/usr/bin/llvm-spirv-${{ matrix.llvm }} \
          -DENABLE_LEVEL0=1 -DENABLE_HOST_CPU_DEVICES=0 -DSTATIC_LLVM=1 \
          -DTESTSUITE_SOURCE_BASEDIR=${EXAMPLES_DIR}/source -DTESTSUITE_BASEDIR=${EXAMPLES_DIR}/build_${{ matrix.llvm }}_${{ matrix.config }} -DENABLE_TESTSUITES=conformance -DENABLE_CONFORMANCE=ON \
          -B ${{ github.workspace }}/build ${{ github.workspace }}

      - name: Run Build
        id: build
        timeout-minutes: 60
        run: |
          cd ${{ github.workspace }}/build && make -j4 && make -j4 prepare_examples

      - name: Run Tests
        env:
          POCL_CACHE_DIR: "${{ runner.temp }}/GH_POCL_CACHE"
        id: ctest
        run: |
          runCTest() {
            cd ${{ github.workspace }}/build && ${{ github.workspace }}/tools/scripts/run_level0_tests -j4 $CTEST_FLAGS "$@"
          }
          rm -rf ${{ env.POCL_CACHE_DIR }}
          # hardcoded path in test_compiler / execute_after_included_header_link
          rm -rf /tmp/foo
          mkdir ${{ env.POCL_CACHE_DIR }}
          if [ "${{ matrix.config }}" == "full_cts_lz" ]; then
            runCTest -L conformance_suite_full_main
          elif [ "${{ matrix.config }}" == "full_cts_lz_spirv" ]; then
            runCTest -L conformance_suite_full_spirv
          else
            echo "Unknown configuration" && exit 1
          fi
