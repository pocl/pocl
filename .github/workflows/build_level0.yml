---
name: Linux / Level Zero GPU tests

permissions:
  contents: read

on:
  push:
    branches:
      - 'main'
      - 'release*'
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - 'doc/**'
      - 'CHANGES'
      - 'COPYING'
      - 'CREDITS'
      - 'LICENSE'
      - 'README.*'
      - 'tools/docker/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref || github.run_id }}
  cancel-in-progress: true

env:
  CCACHE_BASEDIR: "${{ github.workspace }}"
  CCACHE_DIR: "${{ github.workspace }}/../../../../ccache_storage"
  EXAMPLES_DIR: "${{ github.workspace }}/../../../../examples"

jobs:
  level_zero_matrix:
    name: LLVM ${{ matrix.llvm }} - Level Zero - CTS ${{ matrix.conformance }}
    runs-on: [self-hosted, linux, level_zero]
    strategy:
      fail-fast: false
      matrix:
        include:
          - llvm: 17
            conformance: 0
          - llvm: 18
            conformance: 0
          - llvm: 19
            conformance: 1

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Load Env vars
        id: load-env
        run: |
          cat ${{ github.workspace }}/.github/variables.txt >> $GITHUB_ENV

      - name: Run CMake
        id: cmake
        run: |
          runCMake() {
            BUILD_FLAGS="-O1 -march=native -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable"
            cmake -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DDEVELOPER_MODE=ON \
            -DCMAKE_BUILD_TYPE=Release "-DCMAKE_C_FLAGS_RELEASE=$BUILD_FLAGS" "-DCMAKE_CXX_FLAGS_RELEASE=$BUILD_FLAGS" \
            "$@" -B ${{ github.workspace }}/build ${{ github.workspace }}
          }

          rm -rf ${{ github.workspace }}/build
          mkdir ${{ github.workspace }}/build
          mkdir -p ${EXAMPLES_DIR}/build_level0
          mkdir -p ${EXAMPLES_DIR}/source
          # test both with and without ENABLE_CONFORMANCE
          if [ ${{ matrix.conformance }} -eq 0 ]; then
            runCMake -DENABLE_LEVEL0=1 -DENABLE_HOST_CPU_DEVICES=0 -DSTATIC_LLVM=1 -DWITH_LLVM_CONFIG=/usr/bin/llvm-config-${{ matrix.llvm }}
          else
            runCMake -DENABLE_TESTSUITES=conformance -DENABLE_CONFORMANCE=ON -DTESTSUITE_SOURCE_BASEDIR=${EXAMPLES_DIR}/source -DTESTSUITE_BASEDIR=${EXAMPLES_DIR}/build_level0 -DENABLE_LEVEL0=1 -DENABLE_HOST_CPU_DEVICES=0 -DSTATIC_LLVM=1 -DWITH_LLVM_CONFIG=/usr/bin/llvm-config-${{ matrix.llvm }}
          fi

      - name: Run Build
        id: build
        run: |
          cd ${{ github.workspace }}/build && make -j4

      - name: Build OpenCL-CTS
        id: build_examples
        if: ${{ matrix.conformance == 1 }}
        timeout-minutes: 120
        run: |
          cd ${{ github.workspace }}/build/examples/conformance && make -j4 conformance

      - name: Run Tests
        env:
          POCL_CACHE_DIR: "${{ runner.temp }}/GH_POCL_CACHE"
        id: ctest
        timeout-minutes: 120
        run: |
          rm -rf ${{ env.POCL_CACHE_DIR }}
          mkdir ${{ env.POCL_CACHE_DIR }}
          # exclude long tests
          if [ ${{ matrix.conformance }} -eq 0 ]; then
            cd ${{ github.workspace }}/build && ${{ github.workspace }}/tools/scripts/run_level0_tests -j2 $CTEST_FLAGS -LE long
          else
            cd ${{ github.workspace }}/build && ${{ github.workspace }}/tools/scripts/run_level0_tests -j2 $CTEST_FLAGS -L conformance_suite_micro_main -LE long
          fi
